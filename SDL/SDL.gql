schema {
  query: Query
  mutation: Mutations
}

"""
Queries
"""
type Query {
  """
  Получить информацию о геолокации пользователя
  """
  getUserLocation: UserLocationType

  """
  Получить результаты поиска
  """
  search(
    """
    Текст для поиска
    """
    queryText: String!

    """
    Лимит выборки
    """
    limit: Int = 20

    """
    Сдвиг пагинации выборки
    """
    offset: Int = 0

    """
    Метод сортировки выборку
    """
    sort: SearchContentSortingType

    """
    Фильтрация по типу контента
    """
    contentType: SearchContentType

    """
    Фильтрация по длительности видео
    """
    duration: SearchContentDurationType

    """
    Фильтрация по дате опубликования видео
    """
    uploadDate: SearchContentUploadDateType

    """
    Фильтрация по фичам видео
    """
    features: [SearchContentFeaturesType]
  ): SearchResultsType
  searchContentCategories(
    """
    Текст для поиска
    """
    queryText: String!

    """
    Лимит выборки на категорию
    """
    limitPerCategory: Int = 20

    """
    Категории контента поиска
    """
    categories: [SearchContentType]
  ): SearchCategoriesResultsType

  """
  Получить результаты поиска
  """
  searchMyPosts(
    """
    Текст для поиска
    """
    queryText: String!

    """
    Вид загрузки своих постов
    """
    fetchType: SearchContentFetchType

    """
    Лимит выборки
    """
    limit: Int = 20

    """
    Сдвиг пагинации выборки
    """
    offset: Int = 0
  ): PostsType

  """
  Получить результаты поиска
  """
  searchMyPlaylists(
    """
    Текст для поиска
    """
    queryText: String!

    """
    Идентификатор видео. Для проверки входимости видео в плейлисты.
    """
    urlHash: String

    """
    Лимит выборки
    """
    limit: Int = 20

    """
    Сдвиг пагинации выборки
    """
    offset: Int = 0
  ): PlaylistsType

  """
  Получить историю поиска пользователя из Elasticsearch
  """
  getSearchHistory(
    """
    Лимит выборки
    """
    limit: Int = 10

    """
    Сдвиг пагинации выборки
    """
    offset: Int = 0
  ): SearchHistoryType

  """
  Получить подсказки по строке
  """
  getSearchSuggestions(
    """
    Текст для подсказок
    """
    queryText: String!

    """
    Лимит выборки
    """
    limit: Int = 14

    """
    Сдвиг пагинации выборки
    """
    offset: Int = 0
  ): SearchSuggestionsType

  """
  Получить подсказки и id по поиску никнеймов и имен каналов и юзеров
  """
  searchName(
    """
    Текст для поиска имен каналов и никнеймов юзеров
    """
    name: String!
  ): SearchNamesSuggestionsType

  """
  Получить пользователя по UID
  """
  getUser(
    """
    UID пользователя
    """
    uid: UUID!
  ): UserType

  """
  Получить текущего пользователя
  """
  getCurrentUser: UserType

  """
  Получить UID пользователей
  """
  getUsers(
    """
    UID пользователей
    """
    uids: [UUID]
  ): [UserType]

  """
  Получить ссылки на социальные профили текущего пользователя
  """
  getUserSocialProfilesLinks: [SocialProfileLinkType]

  """
  Получить информацию о наличии неподтвержденного токена для email
  """
  checkVerificationCodeForEmail(
    email: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerificationTokenExistsType

  """
  Получить информацию о наличии неподтвержденного токена для мобильного телефона
  """
  checkVerificationCodeForMobile(
    mobilePhone: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerificationTokenExistsType

  """
  Получить пользовательские настройки текущего пользователя
  """
  getUserSettingsByCurrentUser: [UserSettingsType]

  """
  Получить настройки аккаунта текущей залогиненной сущности
  """
  getSettings(settingsType: SettingsType!): Settings

  """
  Получить ссылку на авторизационную форму внешнего сервиса (Google, Meta, etc)
  """
  getSocialNetworkAuthUri(
    redirectUri: String
    socialNetworkType: SocialNetworkType!
  ): SocialNetworkAuthUri

  """
  Найти пользователя по email или имени пользователя
  """
  searchUser(
    """
    Имя пользователя или его почтовый адрес
    """
    searchString: String!
  ): UserType

  """
  Список доступных каналов для переключения в них
  """
  getUserAllChannels: GetUserChannelsType

  """
  Список ролей в системе
  """
  getRolesList: GetRolesListType

  """
  Список пользователей канала
  """
  getChannelUsers: GetChannelUsersType

  """
  Проверить, зарегистрирован ли Email
  """
  checkEmailExists(
    """
    Email для поиска
    """
    email: String!
  ): BaseQueryType

  """
  Проверить, зарегистрирован ли Мобильный телефон
  """
  checkMobilePhoneExists(
    """
    Мобильный телефон для поиска
    """
    mobilePhone: String!
  ): BaseQueryType

  """
  Получить все комментарии поста по фильтру
  """
  getPostParentComments(
    """
    UID поста
    """
    postUid: UUID!

    """
    Тип сортировки
    """
    sort: PostCommentSortingType

    """
    Состояние комментария
    """
    state: PostCommentStateEnum

    """
    Отобразить комментарий первым в выдаче
    """
    firstCommentUid: UUID

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostCommentsType

  """
  Получить все комментарии поста по фильтру
  """
  getPostParentCommentsByUrlHash(
    """
    Короткая ссылка на пост
    """
    urlHash: String!

    """
    Тип сортировки
    """
    sort: PostCommentSortingType

    """
    Состояние комментария
    """
    state: PostCommentStateEnum

    """
    Отобразить комментарий первым в выдаче
    """
    firstCommentUid: UUID

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostCommentsType

  """
  Получить комментарии по UIDу
  """
  getPostParentCommentsByUids(
    """
    UID поста
    """
    postUid: UUID!

    """
    UIDы комментариев
    """
    commentUids: [UUID]!
  ): PostCommentsByUidsType

  """
  Получить все комментарии по родительскому комментарию
  """
  getPostCommentsByParent(
    """
    UID родительского комментария
    """
    parentCommentUid: UUID!

    """
    Тип сортировки
    """
    sort: PostCommentSortingType

    """
    Состояние комментария
    """
    state: PostCommentStateEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostCommentsType

  """
  Получить список видеокомментариев за определенный отрезок времени
  """
  getCurrentVideoComments(
    """
    UID поста/видео
    """
    postUid: UUID!

    """
    Время в секундах, по которому мы получаем список видеокомментариев
    """
    postTimestamp: Int!

    """
    Размер временного интервала поиска комментариев в секундах
    """
    timeInterval: Int
  ): PostVideoCommentsType

  """
  Получить список предстоящих или прошедших видеокомментариев
  """
  getVideoComments(
    """
    UID поста/видео
    """
    postUid: UUID!

    """
    Время до/после которого нужно вернуть комментарии
    """
    timestamp: Int!

    """
    тип запроса: предстоящих или прошедших видеокомментариев.
    """
    fetchKind: VideoCommentFetchKind!

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostVideoCommentsType

  """
  Получить список каналов текущего пользователя
  """
  getUserChannels: ChannelsType

  """
  Получить информацию по UID канала
  """
  getChannel(
    """
    Идентификатор канала
    """
    channelUid: UUID!
  ): ChannelType

  """
  Получить все каналы по фильтру
  """
  getChannels(
    """
    Название канала
    """
    title: String

    """
    UID пользователя
    """
    userUid: UUID

    """
    Состояние канала
    """
    state: ChannelStateEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): ChannelsType

  """
  Получить пост по хэшу
  """
  getPost(
    """
    Хэш поста
    """
    urlHash: String!
  ): PostType

  """
  Получить все посты по фильтру
  """
  getPosts(
    """
    UUID поста
    """
    uid: UUID

    """
    Номер категории
    """
    categoryId: Int

    """
    Название
    """
    title: String

    """
    Тип поста
    """
    postType: PostTypeEnum

    """
    Тип доступа
    """
    access: PostAccessTypeEnum

    """
    UID пользователя
    """
    userUid: UUID

    """
    UID канала
    """
    channelUid: UUID

    """
    Хэш поста
    """
    urlHash: String

    """
    Состояние поста
    """
    states: [PostStateEnum]

    """
    ID эмодзи
    """
    emojiIds: [Int]

    """
    Перемешать случайно список или нет
    """
    shuffleOn: Boolean

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostsType

  """
  Получить список видео публикованное на каналах, на которые подписан пользователь
  """
  getVideosFromSubscribedChannels(
    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): PostsType

  """
  Получить загруженные видео по UID канала
  """
  getUploadedVideos(channelUid: UUID!): [UploadedVideoType]

  """
  Получить информацию об ограничениях по возрасту
  """
  getAgeRestrictions: [PostAgeRestrictionType]

  """
  Получить информацию о категориях поста
  """
  getPostCategories: [PostCategoryType]

  """
  Получить историю просмотров пользователя
  """
  getUserPostWatchHistory(
    """
    Строка поиска
    """
    searchString: String

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int

    """
    Тип сортировки
    """
    sort: PostWatchHistorySortingType
  ): PostsType

  """
  Получить категории тематических каналов
  """
  getSystemChannelCategories: [SystemChannelCategoryType]

  """
  Получить тематический канал по ID категории
  """
  getSystemChannel(
    """
    Категория тематического канала
    """
    systemChannelCategoryId: Int
  ): SystemChannelType

  """
  Получить тематически каналы по фильтру
  """
  getSystemChannels(
    """
    Название системного канала
    """
    title: String

    """
    Категория тематического канала
    """
    systemChannelCategoryId: Int

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): SystemChannelsType

  """
  Получить субтитры по посту и по фильтрам
  """
  getSubtitlesByPostUid(
    """
    UID поста
    """
    postUid: UUID!

    """
    Состояния субтитров
    """
    states: [SubtitlesStateEnum]

    """
    Тип источника субтитров
    """
    sourceTypes: [SubtitlesSourceTypeEnum]

    """
    Тип сортировки
    """
    sort: SubtitlesSortingTypeEnum
  ): [SubtitlesType]

  """
  Получить список всех прав для гостя
  """
  getGuestPermissions: PermissionsType

  """
  Получить список всех прав, которые явно человеку назначены
  """
  getUserPermissions(uid: UUID!): PermissionsType

  """
  Получить список забаненных пользователей
  """
  getBannedUsersByChannel(uid: UUID!): UsersUIDType

  """
  Получить список менеджеров канала
  """
  getManagersByChannel(uid: UUID!): UsersUIDType

  """
  Получить список модераторов канала
  """
  getModeratorsByChannel(uid: UUID!): UsersUIDType

  """
  Получить список редакторов канала
  """
  getEditorsByChannel(uid: UUID!): UsersUIDType

  """
  Получить список подписок текущего пользователя
  """
  getSubscriptionsList(
    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): SubscriptionObjectsType

  """
  Получить информацию о подписках на канал
  """
  getChannelSubscriptionInfo(channelUid: UUID!): ChannelSubscriptionInfoType

  """
  Получить список каналов на которые подписан пользователь-канал
  """
  getSubscribedChannels(
    """
    Количество постов на канал
    """
    topPostsLimit: Int

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): SubscribedChannelsType

  """
  Получить информацию о количестве лайков на посте
  """
  getPostLikesCount(postUid: UUID!): PostLikeCounterType

  """
  Получить информацию о всех лайках постов или по конкретному посту текущего пользователя
  """
  getPostLikesByUser(postUid: UUID): [PostLikeType] @deprecated(reason: "")

  """
  Получить информацию о количестве лайков на комментарии
  """
  getCommentLikesCountByComment(commentUid: UUID!): CommentLikeCounterType

  """
  Получить информацию о всех лайках комментариев текущего пользователя
  """
  getAllCommentsLikesByUser: [CommentLikeType]

  """
  Получить информацию об эмодзи за период времени
  """
  getEmojis(dateFrom: DateTime, dateTo: DateTime): [EmojiType]

  """
  Получить плейлист по UID
  """
  getPlaylist(
    """
    UID плейлиста
    """
    playlistUid: UUID!

    """
    Лимит количества постов в плейлисте
    """
    postsLimit: Int

    """
    Состояния постов плейлиста текущего юзера
    """
    postStates: [PostStateEnum]

    """
    Оффсет количества постов в плейлисте
    """
    postsOffset: Int

    """
    Название поста в плейлисте
    """
    postsTitle: String

    """
    Описание поста в плейлисте
    """
    postsDescription: String

    """
    Тип сортировки постов внутри плейлистов
    """
    sort: PlaylistPostsSortingTypeEnum
  ): PlaylistType

  """
  Получить все плейлисты по фильтру
  """
  getPlaylists(
    """
    Название плейлиста
    """
    title: String

    """
    Номер категории
    """
    categoryId: Int

    """
    Тип доступа плейлиста
    """
    access: PlaylistAccessTypeEnum

    """
    DEPRECATED: Состояние плейлиста
    """
    state: PlaylistStateEnum

    """
    Состояния плейлиста
    """
    states: [PlaylistStateEnum]

    """
    DEPRECATED: UID пользователя
    """
    userUid: UUID

    """
    UID канала
    """
    channelUid: UUID

    """
    Тип сортировки
    """
    sort: PlaylistSortingTypeEnum

    """
    Тип сортировки постов внутри плейлистов
    """
    sortPosts: PlaylistPostsSortingTypeEnum

    """
    Лимит количества постов в плейлисте
    """
    postsLimit: Int

    """
    Оффсет количества постов в плейлисте
    """
    postsOffset: Int

    """
    DEPRECATED: Тип плейлиста
    """
    playlistType: PlaylistTypeEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int

    """
    DEPRECATED: Включать ли в результат плейлисты, которые userUid или channelUid добавили к себе
    """
    withAddedOtherUsersPlaylists: Boolean

    """
    Фильтр по автору (созданный или добавленный)
    """
    filterByCreator: PlaylistCreatorFilterTypeEnum

    """
    Флаг наличия поста в плейлисте
    """
    urlHash: String
  ): PlaylistsType

  """
  Получить информацию о категория плейлиста
  """
  getPlaylistCategories: [PlaylistCategoryType]

  """
  Получить системный плейлист по UID
  """
  getSystemPlaylist(
    """
    UID системного плейлиста
    """
    systemPlaylistUid: UUID!

    """
    Лимит количества постов в системном плейлисте
    """
    postsLimit: Int

    """
    Оффсет количества постов в системном плейлисте
    """
    postsOffset: Int

    """
    Тип сортировки
    """
    sort: PlaylistPostsSortingTypeEnum
  ): SystemPlaylistType

  """
  Получить все системные плейлисты по фильтру
  """
  getSystemPlaylists(
    """
    Название системного плейлиста
    """
    title: String

    """
    Состояние системного плейлиста
    """
    state: PlaylistStateEnum

    """
    UID системного канала
    """
    systemChannelUid: UUID

    """
    Тип сортировки
    """
    sort: PlaylistPostsSortingTypeEnum

    """
    Лимит количества постов в системном плейлисте
    """
    postsLimit: Int

    """
    Оффсет количества постов в системном плейлисте
    """
    postsOffset: Int

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): SystemPlaylistsType

  """
  Получить все плейлисты для страницы Playlists / Channel Playlists
  """
  getUserPlaylistsList(
    """
    Название плейлиста
    """
    title: String

    """
    Тип плейлиста
    """
    playlistOriginType: PlaylistOriginTypeEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int

    """
    Тип сортировки
    """
    sort: PlaylistSortingTypeEnum
  ): PlaylistCardsType

  """
  Получить публичную страницу текущего пользователя
  """
  getUserProfileInfoPage: UserProfileInfoPageType

  """
  Получить все посты по фильтру
  """
  getFavoritedPosts(
    """
    Название поста
    """
    title: String

    """
    Тип сортировки
    """
    orderBy: FavoritesSortingTypeEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): FavoritedPostsType

  """
  Получить все посты по фильтру
  """
  getLikedPosts(
    """
    Название поста
    """
    title: String

    """
    Тип сортировки
    """
    orderBy: LikedSortingTypeEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): LikedPostsType

  """
  Получить все уведомления активности юзера/канала
  """
  getActivityNotifications(
    """
    Тип сортировки
    """
    sort: NotificationsSortingTypeEnum

    """
    Лимит
    """
    limit: Int

    """
    Оффсет
    """
    offset: Int
  ): ActivityNotificationsType

  """
  Получить кол-во непрочитанных уведомлений
  """
  getNotificationsUnreadCount: NotificationsUnreadCountType
  @deprecated(reason: "Use getNotificationsUnwatchedCount instead.")

  """
  Получить кол-во непросмотренных уведомлений
  """
  getNotificationsUnwatchedCount: NotificationsUnwatchedCountType

  """
  Получить список категорий жалоб, которые могут направить пользователи
  """
  getComplaintCategories(
    """
    Тип контента
    """
    contentType: ComplaintContentTypeEnum
  ): ComplaintCategoriesType

  """
  Получить список feature toggles
  """
  getFeatureToggles: GetFeatureTogglesQuery
}

type UserLocationType {
  countryShort: String
  ip: String
  countryLong: String
}

type SearchResultsType {
  success: Boolean
  failure: FailResponseType
  results: [SearchResultType]
  offset: Int
  limit: Int
  totalCount: Int
}

type FailResponseType {
  httpCode: Int
  retryAfter: Int
  errors: [ErrorType]
}

type ErrorType {
  code: String
  messages: [String]
}

union SearchResultType = PostType | ExtendedChannelType | PlaylistType

type PostType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  postType: PostTypeEnum
  state: PostStateEnum
  title: String
  description: String
  category: PostCategoryType
  language: String
  cover: String
  location: String
  ageRestriction: PostAgeRestrictionType
  schedulePost: DateTime
  access: PostAccessTypeEnum
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
  channel: ChannelType
  video: VideoType
  likesCount: Int
  dislikesCount: Int
  urlHash: String
  reactions: [EmojiCounterType]
  userReactionEmojiId: Int
  userReaction: EmojiType
  playlists: [UUID]
  isFavorite: Boolean
  lastTimestamp: Int
  favoritedDate: DateTime
  likedDate: DateTime
  watchDate: DateTime
  videoCommentsCount: Int
  viewsCount: Int
  commentsCount: Int
  reactionsCount: Int
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
An enumeration.
"""
enum PostTypeEnum {
  VIDEO
  LIVE_STREAMING
}

"""
An enumeration.
"""
enum PostStateEnum {
  DELETED
  PUBLISHED
  WAITING_PUBLICATION
  DRAFT
  PENDING_DELETED
}

type PostCategoryType {
  id: Int
  code: String
  nameEn: String
  nameRu: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type PostAgeRestrictionType {
  id: Int
  code: String
  description: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum PostAccessTypeEnum {
  PUBLIC
  VIA_LINK
  ONLY_FOR_ME
}

type ChannelType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  state: ChannelStateEnum
  userUid: UUID
  title: String
  description: String
  contactEmail: String
  banner: String
  logo: String
  topics: [String]
  socialLinks: [OutputSocialProfileLink]
  user: UserType
  playerSettings: PlayerSettingsType
  publishedVideoCount: Int
  postedCommentsCount: Int
  name: String
  subscribersCount: Int
  subscribed: Boolean
  subscriptionNotifications: Boolean
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
}

"""
An enumeration.
"""
enum ChannelStateEnum {
  DELETED
  DRAFT
  PUBLISHED
  PENDING_DELETED
}

type OutputSocialProfileLink {
  """
  UID линка, заполнять только при update
  """
  linkUid: UUID

  """
  Заголовок линка
  """
  linkName: String!

  """
  Линк
  """
  link: String!
}

type UserType {
  success: Boolean
  failure: FailResponseType
  rights: [RightsEnum]
  uid: UUID
  email: String
  name: String
  state: UserStateEnum
  avatar: String
  username: String
  birthday: Date
  mobilePhone: String
  emailDateVerify: DateTime
  mobilePhoneDateVerify: DateTime
  socialNetworkDateVerify: DateTime
  socialProfilesLinks: [SocialProfileLinkType]
  lastChangePassword: DateTime
  settings: [UserSettingsType]
  subscribersCount: Int
  subscribed: Boolean
  subscriptionNotifications: Boolean
  dateCreate: DateTime
  dateUpdate: DateTime
  playerSettings: PlayerSettingsType
  unconsumedCredentials: [UnconsumedCredential]
  defaultAvatarColorStyle: String
  associatedSocialNetworks: [associatedSocialNetwork] 
}

"""
An enumeration.
"""
enum RightsEnum {
  READ
  WRITE
  DELETE
}

"""
An enumeration.
"""
enum UserStateEnum {
  DELETED
  ACTIVE
  UNVERIFIED
  PAUSE
  BLOCK
  PENDING_DELETED
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type associatedSocialNetwork {
  socialNetworkType: SocialNetworkType!
  socialNetworkUserId: String!
  socialNetworkUserName: String!
}

type SocialProfileLinkType {
  success: Boolean
  failure: FailResponseType
  id: Int
  userUid: UUID
  link: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

type UserSettingsType {
  success: Boolean
  failure: FailResponseType
  userSettingsTypeId: Int
  userSettingsValue: Boolean
}

type PlayerSettingsType {
  speed: Float
  volume: Float
  quality: Int
  isSubtitlesEnabled: Boolean
  videocommentsEnabled: Boolean
  videocommentsVolumeEnabled: Boolean
}

type UnconsumedCredential {
  unconsumedCredentialId: Int
  loginType: LoginTypeEnum
  value: String
}

"""
An enumeration.
"""
enum LoginTypeEnum {
  MOBILE_PHONE
  EMAIL
}

type VideoType {
  uid: UUID
  postUid: UUID
  state: VideoStateEnum
  dashManifestPath: String
  hlsManifestPath: String
  fileName: String
  subtitles: [SubtitlesType]
  uploadedVideo: UploadedVideoType
  transcodedVideos: [VideoFileModelType]
  progressbarThumbnails: ProgressbarThumbnailsType
  defaultCovers: [String]
  duration: Float
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum VideoStateEnum {
  UPLOADING
  FAIL_UPLOADING
  REJECTED
  QUEUE_TRANSCODING
  TRANSCODING
  FAIL_TRANSCODING
  COMPLETED
}

type SubtitlesType {
  id: Int
  videoUid: UUID
  format: String
  path: String
  language: String
  originalName: String
  dateCreate: DateTime
  dateUpdate: DateTime
  state: SubtitlesStateEnum
  sourceType: SubtitlesSourceTypeEnum
}

"""
An enumeration.
"""
enum SubtitlesStateEnum {
  ACTIVE
  DELETED
  DRAFT
}

"""
An enumeration.
"""
enum SubtitlesSourceTypeEnum {
  AUTO
  MANUAL
  UPLOAD
}

type UploadedVideoType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  videoUid: UUID
  state: UploadVideoFileStateEnum
  path: String
  vcodec: String
  acodec: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum UploadVideoFileStateEnum {
  UPLOAD
  COMPLETED
}

type VideoFileModelType {
  uid: UUID
  videoUid: UUID
  state: VideoFileStateEnum
  path: String
  vcodec: String
  acodec: String
  scale: Int
  width: Int
  height: Int
  videoBitrate: Int
  audioBitrate: Int
  fps: Int
  duration: Float
  size: Int
  indexPath: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum VideoFileStateEnum {
  FAIL_TRANSCODING
  TRANSCODING
  COMPLETED
}

type ProgressbarThumbnailsType {
  id: Int
  videoUid: UUID
  secondsBetweenFrames: Float
  videoDuration: Float
  totalNumberOfFrames: Int
  filenameTemplate: String
  basePath: String
  thumbnails: [ThumbnailsType]
}

type ThumbnailsType {
  extendedPath: String
  numberOfRegions: Int
  framesPerRegion: Int
  width: Int
  height: Int
  isLowQuality: Boolean
}

type EmojiCounterType {
  postUid: UUID
  emojiId: Int
  count: Int
  dateCreate: DateTime
  dateUpdate: DateTime
}

type EmojiType {
  id: Int
  name: String
  connotation: PostLikeStatusEnum
  shadowColor: String
  dateFrom: DateTime
  dateTo: DateTime
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum PostLikeStatusEnum {
  UNLIKE
  LIKE
  DISLIKE
}

type ExtendedChannelType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  state: ChannelStateEnum
  userUid: UUID
  title: String
  description: String
  contactEmail: String
  banner: String
  logo: String
  topics: [String]
  socialLinks: [OutputSocialProfileLink]
  user: UserType
  playerSettings: PlayerSettingsType
  publishedVideoCount: Int
  postedCommentsCount: Int
  name: String
  subscribersCount: Int
  subscribed: Boolean
  subscriptionNotifications: Boolean
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
  posts: [PostType]
}

type PlaylistType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  userUid: UUID
  channelUid: UUID
  title: String
  description: String
  state: PlaylistStateEnum
  access: PlaylistAccessTypeEnum
  tags: [String]
  categoryId: Int
  cover: String
  postCount: Int
  viewsCount: Int
  lastPostUid: UUID
  user: UserType
  posts: PostsType
  channel: ChannelType
  isAddedToMyPlaylists: Boolean
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
  hasUrlHash: Boolean
}

"""
An enumeration.
"""
enum PlaylistStateEnum {
  DELETED
  DRAFT
  PUBLISHED
  PENDING_DELETED
}

"""
An enumeration.
"""
enum PlaylistAccessTypeEnum {
  PUBLIC
  VIA_LINK
  HIDDEN_BY_CREATOR
}

type PostsType {
  success: Boolean
  failure: FailResponseType
  posts: [PostType]
  limit: Int
  offset: Int
  totalCount: Int
}

"""
An enumeration.
"""
enum SearchContentSortingType {
  RELEVANCE
  UPLOAD_DATE
  VIEW_COUNT
  RATING
}

"""
An enumeration.
"""
enum SearchContentType {
  VIDEO
  CHANNEL
  PLAYLIST
  FILM
}

"""
An enumeration.
"""
enum SearchContentDurationType {
  SHORT
  MEDIUM
  LONG
}

"""
An enumeration.
"""
enum SearchContentUploadDateType {
  LAST_HOUR
  TODAY
  THIS_WEEK
  THIS_MONTH
  THIS_YEAR
}

"""
An enumeration.
"""
enum SearchContentFeaturesType {
  LIVE
  VIDEO_4K
  HD
  SUBTITLES
  CC
}

type SearchCategoriesResultsType {
  success: Boolean
  failure: FailResponseType
  results: [SearchCategoriesResultType]
  offset: Int
  limit: Int
  totalCount: Int
}

union SearchCategoriesResultType = PostType | PlaylistType | ChannelType

"""
An enumeration.
"""
enum SearchContentFetchType {
  ME
  LIKED
  FAVORITED
}

type PlaylistsType {
  success: Boolean
  failure: FailResponseType
  playlists: [PlaylistType]
  limit: Int
  offset: Int
  totalCount: Int
  totalHiddenCount: Int
}

type SearchHistoryType {
  success: Boolean
  failure: FailResponseType
  queries: [SearchQueryType]
}

type SearchQueryType {
  id: Int
  queryText: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

type SearchSuggestionsType {
  success: Boolean
  failure: FailResponseType
  suggestions: [SuggestionEntryType]
}

type SuggestionEntryType {
  text: String
}

type SearchNamesSuggestionsType {
  success: Boolean
  failure: FailResponseType
  suggestions: [NamesSuggestionEntry]
}

type NamesSuggestionEntry {
  entityUid: UUID
  name: String
}

type VerificationTokenExistsType {
  success: Boolean
  failure: FailResponseType
  exists: Boolean
}

"""
An enumeration.
"""
enum VerificationTypeEnum {
  REGISTER_EMAIL
  EDIT_EMAIL
  REGISTER_MOBILE
  EDIT_MOBILE
  RESET_PASSWORD_EMAIL
  RESET_PASSWORD_MOBILE
}

type Settings {
  success: Boolean
  failure: FailResponseType
  settings: [SettingsEntry]
}

type SettingsEntry {
  name: String
  value: String
}

"""
An enumeration.
"""
enum SettingsType {
  GENERAL
  NOTIFICATIONS
  UPLOAD_AVATAR
}

type SocialNetworkAuthUri {
  success: Boolean
  failure: FailResponseType
  authUri: String
}

"""
An enumeration.
"""
enum SocialNetworkType {
  VK
  MAILRU
  OKRU
  YARU
  GOOGLE
  FACEBOOK
}

type GetUserChannelsType {
  success: Boolean
  failure: FailResponseType
  channels: [ChannelRoleType]
}

type ChannelRoleType {
  channelUid: UUID
  channel: ChannelType
  roleId: Int
  description: String
  dateCreate: DateTime
}

type GetRolesListType {
  success: Boolean
  failure: FailResponseType
  roles: [RoleType]
}

type RoleType {
  id: Int
  name: String
  isManageable: Boolean
}

type GetChannelUsersType {
  success: Boolean
  failure: FailResponseType
  users: [ChannelUserType]
}

type ChannelUserType {
  userUid: UUID
  user: UserType
  roleId: String
  description: String
  state: RoleStateEnum
  dateCreate: DateTime
}

"""
An enumeration.
"""
enum RoleStateEnum {
  ACTIVE
  INVITED
  CANCELLED
  INVITATION_EXPIRED
}

type BaseQueryType {
  success: Boolean
  failure: FailResponseType
}

type PostCommentsType {
  success: Boolean
  failure: FailResponseType
  comments: [PostCommentType]
  limit: Int
  offset: Int
  totalCount: Int
  totalCommentsCount: Int
}

type PostCommentType {
  uid: UUID
  parentUid: UUID
  postUid: UUID
  userUid: UUID
  channelUid: UUID
  channel: ChannelType
  postVideoTimestamp: Int
  replyTo: UUID
  text: String
  replyCount: Int
  pinTime: DateTime
  state: PostCommentStateEnum
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
  isOwner: Boolean
  user: UserType
  likesCount: Int
  dislikesCount: Int
  userReaction: UserReactionType
  authorReaction: UserReactionType
  userReplies: UserRepliesEnum
  commentVideoUid: UUID
  postCommentVideoType: PostCommentVideoType
}

"""
An enumeration.
"""
enum PostCommentStateEnum {
  DRAFT
  PUBLISHED
  DELETED
  BLOCK
  PENDING_DELETED
}

enum UserReactionType {
  LIKE
  DISLIKE
}

"""
An enumeration.
"""
enum UserRepliesEnum {
  AUTHOR_ONLY
  USERS_ONLY
  MIXED
}

type PostCommentVideoType {
  uid: UUID
  transcodingJobUid: UUID
  state: VideoCommentStateEnum
  fileName: String
  gifPreview: String
  cover: String
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
  duration: Float
}

"""
An enumeration.
"""
enum VideoCommentStateEnum {
  UPLOADING
  TRANSCODING
  COMPLETED
  DELETED
  TRANSCODING_FAILED
}

"""
An enumeration.
"""
enum PostCommentSortingType {
  DATE_ASC
  DATE_DESC
  POPULARITY_ASC
  POPULARITY_DESC
  AUTHOR_FIRST
  AUTHOR_LAST
}

type PostCommentsByUidsType {
  success: Boolean
  failure: FailResponseType
  comments: [PostCommentType]
}

type PostVideoCommentsType {
  success: Boolean
  failure: FailResponseType
  videoComments: [PostVideoCommentExtendedType]
  limit: Int
  offset: Int
  totalCount: Int
}

type PostVideoCommentExtendedType {
  videoComment: PostCommentVideoType
  author: UserType
  authorViaChannel: ChannelType
  startTime: Int
  endTime: Float
}

"""
An enumeration.
"""
enum VideoCommentFetchKind {
  UPCOMING
  PREVIOUS
}

type ChannelsType {
  success: Boolean
  failure: FailResponseType
  channels: [ChannelType]
  limit: Int
  offset: Int
  totalCount: Int
}

"""
An enumeration.
"""
enum PostWatchHistorySortingType {
  DATE_WATCH_ASC
  DATE_WATCH_DESC
}

type SystemChannelCategoryType {
  id: Int
  name: String
  shortName: String
  order: Int
  isActive: Boolean
  color: String
}

type SystemChannelType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  systemChannelCategoryId: Int
  title: String
  description: String
  logo: String
  promoPlaylist: SystemPlaylistType
  systemPlaylists: [SystemPlaylistType]
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
}

type SystemPlaylistType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  systemChannelUid: UUID
  title: String
  description: String
  state: PlaylistStateEnum
  tags: [String]
  cover: String
  postCount: Int
  viewsCount: Int
  lastPostUid: UUID
  posts: [PostType]
  dateCreate: DateTime
  dateUpdate: DateTime
  dateDelete: DateTime
}

type SystemChannelsType {
  success: Boolean
  failure: FailResponseType
  systemChannels: [SystemChannelType]
  limit: Int
  offset: Int
  totalCount: Int
}

"""
Перечисление возможных сортировок
"""
enum SubtitlesSortingTypeEnum {
  LANGUAGE_ASC
  LANGUAGE_DESC
  SOURCE_TYPE_ASC
  SOURCE_TYPE_DESK
  STATE_TYPE_ASC
  STATE_TYPE_DESK
  DATE_UPDATE_ASC
  DATE_UPDATE_DESK
}

type PermissionsType {
  permissions: [String]
}

type UsersUIDType {
  users: [UUID]
}

type SubscriptionObjectsType {
  success: Boolean
  failure: FailResponseType
  subscriptions: [SubscriptionObjectType]
  limit: Int
  offset: Int
  totalCount: Int
}

type SubscriptionObjectType {
  """
  UUID пользователя
  """
  userUid: UUID

  """
  UUID канала
  """
  channelUid: UUID

  """
  Название
  """
  title: String

  """
  Логотип
  """
  logo: String
}

type ChannelSubscriptionInfoType {
  success: Boolean
  failure: FailResponseType
  channelUid: UUID
  userSubscriptionStatus: String
  subscriptionsCount: Int
}

type SubscribedChannelsType {
  success: Boolean
  failure: FailResponseType
  channels: [SubscribedChannelType]
  limit: Int
  offset: Int
  totalCount: Int
}

type SubscribedChannelType {
  uid: UUID
  state: ChannelStateEnum
  title: String
  description: String
  banner: String
  logo: String
  name: String
  topics: [String]
  user: UserType
  publishedVideoCount: Int
  postedCommentsCount: Int
  subscribersCount: Int
  subscribed: Boolean
  subscriptionNotifications: Boolean
  dateCreate: DateTime
  dateUpdate: DateTime
  topPosts: [PostCardType]
}

type PostCardType {
  uid: UUID
  urlHash: String
  postType: PostTypeEnum
  state: PostStateEnum
  title: String
  description: String
  cover: String
  location: String
  ageRestriction: PostAgeRestrictionType
  access: PostAccessTypeEnum
  dateCreate: DateTime
  dateUpdate: DateTime
  video: VideoType
  watchDate: DateTime
  videoCommentsCount: Int
}

type PostLikeCounterType {
  success: Boolean
  failure: FailResponseType
  postUid: UUID
  likesCount: Int
  dislikesCount: Int
  dateCreate: DateTime
  dateUpdate: DateTime
}

type PostLikeType {
  success: Boolean
  failure: FailResponseType
  postUid: UUID
  userUid: UUID
  status: PostLikeStatusEnum
  dateCreate: DateTime
  dateUpdate: DateTime
}

type CommentLikeCounterType {
  success: Boolean
  failure: FailResponseType
  commentUid: UUID
  likesCount: Int
  dislikesCount: Int
  dateCreate: DateTime
  dateUpdate: DateTime
}

type CommentLikeType {
  success: Boolean
  failure: FailResponseType
  commentUid: UUID
  userUid: UUID
  status: PostLikeStatusEnum
  dateCreate: DateTime
  dateUpdate: DateTime
}

"""
An enumeration.
"""
enum PlaylistPostsSortingTypeEnum {
  DATE_ASC
  DATE_DESC
  ORDER_ASC
  ORDER_DESC
  VIEWS_ASC
  VIEWS_DESC
}

"""
An enumeration.
"""
enum PlaylistSortingTypeEnum {
  DATE_CREATE_ASC
  DATE_CREATE_DESC
  DATE_UPDATE_ASC
  DATE_UPDATE_DESC
  VIEWS_COUNT_ASC
  VIEWS_COUNT_DESC
  ALPHABETICAL_ASC
  ALPHABETICAL_DESC
}

"""
An enumeration.
"""
enum PlaylistTypeEnum {
  USER
  CHANNEL
}

"""
An enumeration.
"""
enum PlaylistCreatorFilterTypeEnum {
  CREATED
  ADDED
}

type PlaylistCategoryType {
  id: Int
  code: String
  nameEn: String
  nameRu: String
  dateCreate: DateTime
  dateUpdate: DateTime
}

type SystemPlaylistsType {
  success: Boolean
  failure: FailResponseType
  systemPlaylists: [SystemPlaylistType]
  limit: Int
  offset: Int
  totalCount: Int
}

type PlaylistCardsType {
  success: Boolean
  failure: FailResponseType
  playlists: [PlaylistCardType]
  limit: Int
  offset: Int
  totalCount: Int
}

type PlaylistCardType {
  uid: UUID
  userUid: UUID
  channelUid: UUID
  title: String
  postCount: Int
  cover: String
  dateUpdate: String
}

"""
An enumeration.
"""
enum PlaylistOriginTypeEnum {
  OWN
  ADDED
  SYSTEM
}

type UserProfileInfoPageType {
  user: UserType
  likePostsByUser: PostLikeType
  favoritePostsByUserCount: Int
}

type FavoritedPostsType {
  success: Boolean
  failure: FailResponseType
  posts: [PostType]
  limit: Int
  offset: Int
  totalCount: Int
  lastUpdated: DateTime
}

"""
Перечисление возможных сортировок
"""
enum FavoritesSortingTypeEnum {
  DATE_CREATE_ASC
  DATE_CREATE_DESC
}

type LikedPostsType {
  success: Boolean
  failure: FailResponseType
  posts: [PostType]
  limit: Int
  offset: Int
  totalCount: Int
  lastUpdated: DateTime
}

"""
Перечисление возможных сортировок
"""
enum LikedSortingTypeEnum {
  DATE_CREATE_ASC
  DATE_CREATE_DESC
}

type ActivityNotificationsType {
  success: Boolean
  failure: FailResponseType
  notifications: [ActivityNotificationType]
  limit: Int
  offset: Int
  totalCount: Int
  totalUnreadCount: Int
  totalUnwatchedActivitiesCount: Int
}

type ActivityNotificationType {
  success: Boolean
  failure: FailResponseType
  uid: UUID
  receiverUid: UUID
  receiverType: EventReceiverKind
  initiators: [EventInitiator]
  messageTemplate: String
  messageTemplateArgs: [Dictionary]
  links: [Dictionary]
  postCoverPath: String
  readStatus: ReadStatus
  hiddenStatus: HiddenStatus
  watchStatus: WatchStatus
  dateCreate: DateTime
}

"""
An enumeration.
"""
enum EventReceiverKind {
  USER
  CHANNEL
  POST
  COMMENT
  ANY
}

type EventInitiator {
  uid: UUID
  kind: EventInitiatorKind
  name: String
  avatar: String
}

"""
An enumeration.
"""
enum EventInitiatorKind {
  USER
  CHANNEL
}

type Dictionary {
  name: String
  value: String
}

"""
An enumeration.
"""
enum ReadStatus {
  READ
  UNREAD
}

"""
An enumeration.
"""
enum HiddenStatus {
  HIDDEN
  SHOWN
}

"""
An enumeration.
"""
enum WatchStatus {
  VIEWED
  UNWATCHED
}

"""
An enumeration.
"""
enum NotificationsSortingTypeEnum {
  DATE_ASC
  DATE_DESC
}

type NotificationsUnreadCountType {
  success: Boolean
  failure: FailResponseType
  unreadCount: Int
}

type NotificationsUnwatchedCountType {
  success: Boolean
  failure: FailResponseType
  unwatchedCount: Int
}

type ComplaintCategoriesType {
  success: Boolean
  failure: FailResponseType
  complaintCategories: [ComplaintCategoryType]
}

type ComplaintCategoryType {
  contentType: ComplaintContentTypeEnum
  id: Int
  nameEn: String
  tag: String
}

"""
An enumeration.
"""
enum ComplaintContentTypeEnum {
  VIDEO
  CHANNEL
  USER
  COMMENT
  PLAYLIST
  VIDEO_PREVIEW
}

"""
Mutations
"""
type Mutations {
  """
  Зарегистрировать нового пользователя с помощью почтового ящика
  """
  registerEmail(email: String!, password: String!): RegisterEmailMutation

  """
  Верифицировать пользователя с помощью почтового ящика
  """
  verifyEmail(
    email: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerifyEmailMutation

  """
  Сбросить пароль для почтового ящика
  """
  resetPasswordEmail(email: String!): ResetPasswordEmailMutation

  """
  Подтвердить сброс пароля с помощью почтового ящика
  """
  verifyResetPasswordEmail(
    email: String!
    password: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerifyResetPasswordEmailMutation

  """
  Зарегистрировать нового пользователя с помощью мобильного телефона
  """
  registerMobile(
    mobilePhone: String!
    password: String!
  ): RegisterMobileMutation

  """
  Верифицировать пользователя с помощью мобильного телефона
  """
  verifyMobile(
    mobilePhone: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerifyMobileMutation

  """
  Сбросить пароль для мобильного телефона
  """
  resetPasswordMobile(mobilePhone: String!): ResetPasswordMobileMutation

  """
  Подтвердить сброс пароля с помощью мобильного телефона
  """
  verifyResetPasswordMobile(
    mobile: String!
    password: String!
    token: String!
    verificationType: VerificationTypeEnum!
  ): VerifyResetPasswordMobileMutation

  """
  Аутентифицироваться в системе. Логин может быть любым (мобильный телефон/почтовый ящик)
  """
  login(login: String!, password: String!): LoginMutation

  """
  Аутентифицироваться в системе с помощью социальной сети с помощью кода
  """
  socialNetworkLogin(
    code: String!
    socialNetworkType: SocialNetworkType!
  ): SocialNetworkLoginMutation

  """
  Аутентифицироваться в системе с помощью социальной сети и токена доступа
  """
  socialNetworkLoginViaAccessToken(
    accessToken: String!
    socialNetworkType: SocialNetworkType!
  ): SocialNetworkLoginViaAccessTokenMutation

  """
  Добавить пользователю идентификатор социальной сети
  """
  addSocialNetworkIdToExistedUser(
    email: String!
    socialNetworkType: SocialNetworkType!
    socialNetworkUserId: String!
  ): AddSocialNetworkIdToExistedUserMutation

  """
  Добавить пользователю социальную сеть
  как способ авторизации
  """
  addSocialNetwork(
    socialNetworkType: SocialNetworkType!
    socialNetworkUserId: String!
  ): AddSocialNetworkMutation

  """
  Удалить у пользователя социальную сеть
  как способ авторизации
  """
  deleteSocialNetwork(
    socialNetworkType: SocialNetworkType!
    socialNetworkUserId: String!
  ): DeleteSocialNetworkMutation

  """
  Обновить пользователя
  """
  updateUser(
    email: String!
    password: String!
    state: UserStateEnum!
  ): UpdateUserMutation

  """
  Изменить почтовый ящик пользователя
  """
  editEmail(email: String!): EditUserEmailMutation

  """
  Изменить пароль для текущего пользователя
  """
  editPassword(
    """
    Новый пароль
    """
    password: String!
  ): EditUserPassword

  """
  Изменить имя пользователя
  """
  editName(name: String!): EditUserNameMutation

  """
  Изменить юзернейм пользователя
  """
  editUsername(username: String!): EditUserUsernameMutation

  """
  Изменить телефон пользователя
  """
  editMobilePhone(mobilePhone: String!): EditUserMobilePhoneMutation

  """
  Изменить дату рождения текущего пользователя
  """
  updateUserBirthday(birthday: Date!): UpdateUserBirthdayMutation

  """
  Запустить процесс удаления пользователя
  """
  deleteUser: DeleteUserMutation

  """
  Удалить аватар пользователя
  """
  deleteAvatar: DeleteUserAvatarMutation

  """
  Выйти из аккаунта
  """
  logout(refreshToken: String): LogoutMutation

  """
  Выйти из всех аккаунтов
  """
  logoutAll(refreshToken: String): LogoutAllMutation

  """
  Обновить refresh token
  """
  refreshToken(refreshToken: String!): RefreshTokenMutation

  """
  Добавить ссылку на социальный профиль
  """
  addUserSocialProfileLink(link: String!): AddUserSocialProfileLinkMutation

  """
  Удалить ссылку на социальный профиль
  """
  deleteUserSocialProfileLink(linkId: Int!): DeleteUserSocialProfileLinkMutation

  """
  Обновить настройки пользователя
  """
  updateUserSettings(
    """
    ID настройки пользователя
    """
    userSettingsTypeId: Int!

    """
    Активность настройки
    """
    userSettingsValue: Boolean!
  ): UpdateUserSettingsMutation

  """
  Обновить настройки плеера пользователя
  """
  updateUserPlayerSettings(
    """
    Включены ли субтитры
    """
    isSubtitlesEnabled: Boolean

    """
    Качество воспроизведения видео
    """
    quality: Int

    """
    Скорость воспроизведения видео
    """
    speed: Float

    """
    Включены ли видеокомментарии
    """
    videocommentsEnabled: Boolean

    """
    Включен ли звук видеокомментариев
    """
    videocommentsVolumeEnabled: Boolean

    """
    Громкость воспроизведения видео
    """
    volume: Float
  ): UpdateUserPlayerSettingsMutation

  """
  Проверить валидность одноразового пароля
  """
  verifyOneTimePassword(
    """
    Имя пользователя (почта, мобильный телефон)
    """
    login: String!

    """
    Тип операции для подтверждения OTP
    """
    operationType: OneTimePasswordOperationTypeEnum!

    """
    Одноразовый пароль
    """
    otp: String!
  ): VerifyOneTimePassword

  """
  Изменить пароль для аккаунта с почтой
  """
  changeEmailPassword(
    """
    Почта юзера
    """
    email: String!

    """
    Пароль
    """
    password: String!

    """
    Токен
    """
    token: String!
  ): ChangeEmailPassword

  """
  Изменить пароль для аккаунта с мобильным телефоном
  """
  changeMobilePassword(
    """
    Номер мобильного телефона
    """
    mobilePhone: String!

    """
    Пароль
    """
    password: String!

    """
    Токен
    """
    token: String!
  ): ChangeMobilePassword

  """
  Аутентифицироваться от лица канала в системе
  """
  loginChannel(
    """
    UID канала
    """
    channelUid: UUID!
  ): LoginChannelMutation

  """
  Удалить неподтвержденные юзером email и номер телефона
  """
  deleteUnconsumedUserCredentials(
    """
    Тип логина для удаления
    """
    loginType: LoginTypeEnum!

    """
    ID неподтвержденных действий
    """
    unconsumedCredentialsId: Int!
  ): DeleteUnconsumedUserCredentialsMutation

  """
  Обновить настройку профиля
  """
  updateSettings(
    """
    Имя настройки, которую мы хотим поменять
    """
    name: String!

    """
    Тип настройки, которые мы хотим поменять
    """
    type: SettingsType!

    """
    Значение настройки, которую мы хотим поменять
    """
    value: String!
    valueType: SettingsValueType!
  ): UpdateSettingsMutation

  """
  Обновить описание роли в канале
  """
  updateRoleDescription(
    """
    Описание
    """
    description: String!

    """
    UID пользователя
    """
    userUid: UUID!
  ): UpdateRoleDescription

  """
  Принять приглашение в канал другого пользователя
  """
  acceptChannelInvitation(
    """
    UID канала
    """
    channelUid: UUID!
  ): AcceptChannelInvitation

  """
  Поменять пользователю роль в канале
  """
  updateRoleInChannel(
    """
    ID роли
    """
    roleId: Int!

    """
    UID пользователя
    """
    userUid: UUID!
  ): UpdateUserRoleInChannel

  """
  Удалить роль пользователя в канале
  """
  deleteUserRoleInChannel(
    """
    UID пользователя
    """
    userUid: UUID!
  ): DeleteUserRoleInChannel

  """
  Отправить пользователю приглашение для работы в своем канале
  """
  inviteUserToChannel(
    """
    ID роли
    """
    roleId: Int!

    """
    UID пользователя которому отправили приглашение
    """
    userUid: UUID!
  ): InviteUserToChannel

  """
  Добавить комментарий к посту
  """
  addPostComment(
    """
    UID родительского комментария
    """
    parentUid: UUID

    """
    UID поста
    """
    postUid: UUID!

    """
    UID комментария для ответа
    """
    replyTo: UUID

    """
    Текст комментария
    """
    text: String!
  ): AddPostCommentMutation

  """
  Обновить комментарий к посту
  """
  updatePostComment(
    """
    UID комментария
    """
    commentUid: UUID!

    """
    Состояние комментария
    """
    state: PostCommentStateEnum

    """
    Текст комментария
    """
    text: String
  ): UpdatePostCommentMutation

  """
  Закрепить комментарий к посту
  """
  pinPostComment(
    """
    UID комментария
    """
    commentUid: UUID!

    """
    Состояние пина комментария
    """
    pin: Boolean!
  ): PinPostCommentMutation

  """
  Добавить видеокомментарий к посту
  """
  addPostVideoComment(
    """
    UID родительского комментария
    """
    parentUid: UUID

    """
    UID поста
    """
    postUid: UUID!

    """
    UID комментария для ответа
    """
    replyTo: UUID

    """
    Видеоролик
    """
    videoComment: Upload!

    """
    Момент видео к которому относится комментарий (секунда видео)
    """
    videoTimestamp: Int
  ): AddVideoCommentMutation

  """
  Подписаться на канал
  """
  subscribeChannel(
    """
    UID канала
    """
    channelUid: UUID!
  ): SubscribeChannelMutation

  """
  Отписаться от канала
  """
  unsubscribeChannel(
    """
    UID канала
    """
    channelUid: UUID!
  ): UnsubscribeChannelMutation

  """
  Включить/отключить уведомления от подписанного канала
  """
  toggleChannelNotifications(
    """
    UID канала
    """
    channelUid: UUID!
  ): ToggleChannelNotifications

  """
  Подписаться на пользователя
  """
  subscribeUser(
    """
    UID пользователя
    """
    userUid: UUID!
  ): SubscribeUserMutation

  """
  Отписаться от пользователя
  """
  unsubscribeUser(
    """
    UID пользователя
    """
    userUid: UUID!
  ): UnsubscribeUserMutation

  """
  Включить/отключить уведомелния от подписанного пользователя
  """
  toggleUserNotifications(
    """
    UID пользователя
    """
    userUid: UUID!
  ): ToggleUserNotifications

  """
  Поставить лайк вместе с реакцией или обновить состояние существующего
  """
  updatePostLike(
    """
    ID эмодзи
    """
    emojiId: Int!

    """
    UID поста
    """
    postUid: UUID!

    """
    Состояние лайка
    """
    state: PostLikeStatusEnum!
  ): UpdatePostLikeMutation

  """
  Поставить лайк на комментарий или обновить состояние существующего
  """
  updateCommentLike(
    """
    UID комментария
    """
    commentUid: UUID!

    """
    Состояние лайка
    """
    state: PostLikeStatusEnum!
  ): UpdateCommentLikeMutation

  """
  Создание эмодзи
  """
  createEmoji(
    """
    Коннотация эмодзи
    """
    connotation: PostLikeStatusEnum!

    """
    Дата С для эмодзи
    """
    dateFrom: DateTime

    """
    Дата ПО для эмодзи
    """
    dateTo: DateTime

    """
    Имя эмодзи
    """
    name: String!

    """
    Цвет тени эмодзи
    """
    shadowColor: String!
  ): CreateEmojiMutation

  """
  Обновление эмодзи
  """
  updateEmoji(
    """
    Коннотация эмодзи
    """
    connotation: PostLikeStatusEnum!

    """
    Дата С для эмодзи
    """
    dateFrom: DateTime!

    """
    Дата ПО для эмодзи
    """
    dateTo: DateTime

    """
    ID эмодзи
    """
    emojiId: Int!

    """
    Цвет тени эмодзи
    """
    shadowColor: String!
  ): UpdateEmojiMutation

  """
  Создать плейлист
  """
  createPlaylist(
    """
    Тип доступа плейлиста
    """
    access: PlaylistAccessTypeEnum

    """
    Название плейлиста
    """
    title: String!
  ): CreatePlaylistMutation

  """
  Обновить плейлист
  """
  updatePlaylist(
    """
    Тип доступа к плейлисту
    """
    access: PlaylistAccessTypeEnum

    """
    Номер категории
    """
    categoryId: Int

    """
    Описание плейлиста
    """
    description: String

    """
    UID плейлиста
    """
    playlistUid: UUID!

    """
    Состояние плейлиста
    """
    state: PlaylistStateEnum

    """
    Теги плейлиста
    """
    tags: [String]

    """
    Название плейлиста
    """
    title: String
  ): UpdatePlaylistMutation

  """
  Загрузить обложку плейлиста
  """
  uploadCoverByPlaylistUid(
    """
    Обложка плейлиста
    """
    image: Upload!

    """
    UID плейлиста
    """
    playlistUid: UUID!
  ): UploadPlaylistCoverMutation

  """
  Удалить обложку плейлиста
  """
  deleteCoverByPlaylistUid(
    """
    UID плейлиста
    """
    playlistUid: UUID!
  ): DeletePlaylistCoverMutation

  """
  Удалить плейлист
  """
  deletePlaylist(
    """
    UID плейлиста
    """
    playlistUid: UUID!
  ): DeletePlaylistMutation

  """
  Добавить посты в плейлист
  """
  addPlaylistPosts(
    """
    UID плейлиста
    """
    playlistUid: UUID!

    """
    UIDы постов
    """
    postUids: [UUID]!
  ): AddPlaylistPostsMutation

  """
  Удалить посты из плейлиста
  """
  deletePlaylistPosts(
    """
    UID плейлиста
    """
    playlistUid: UUID!

    """
    UIDы постов
    """
    postUids: [UUID]!
  ): DeletePlaylistPostsMutation

  """
  Обновляет список плейлистов для указанного поста
  """
  updatePlaylists(
    """
    Список плейлистов
    """
    playlistUids: [UUID]!

    """
    UID поста
    """
    postUid: UUID!
  ): UpdatePlaylists

  """
  Редактирует порядковые номера постов в указанном плейлисте
  """
  reorderPlaylistPost(
    """
    UID плейлиста
    """
    playlistUid: UUID!
    posts: [PostOrderType]
  ): ReorderPlaylistPost

  """
  Установить кавер поста как кавер плейлиста
  """
  setPostCoverToPlaylist(
    """
    UID плейлиста
    """
    playlistUid: UUID!

    """
    UID поста
    """
    postUid: UUID!
  ): SetPostCoverToPlaylist

  """
  Добавление себе чужого плейлиста
  """
  addOtherUserPlaylist(
    """
    UID плейлиста
    """
    playlistUid: UUID!
  ): AddOtherUserPlaylist

  """
  Удаление чужого плейлиста из списка своипх плейлистов
  """
  removeOtherUserPlaylist(
    """
    UID плейлиста
    """
    playlistUid: UUID!
  ): RemoveOtherUserPlaylist

  """
  Обновить тип доступа добавленного плейлиста
  """
  updateAddedPlaylistAccess(
    """
    Тип доступа к плейлисту
    """
    access: PlaylistAccessTypeEnum!

    """
    UID добавленного пользователем плейлиста
    """
    playlistUid: UUID!
  ): UpdateAddedPlaylistAccessMutation

  """
  Создать канал
  """
  createChannel(
    """
    Имя/Alias канала
    """
    name: String

    """
    Название канала
    """
    title: String!
  ): CreateChannelMutation

  """
  Обновить канал
  """
  updateChannel(
    """
    UID канала
    """
    channelUid: UUID!

    """
    Контактный email
    """
    contactEmail: String

    """
    Описание канала
    """
    description: String

    """
    Имя/Alias канала
    """
    name: String

    """
    Состояние канала
    """
    state: ChannelStateEnum!

    """
    Название канала
    """
    title: String

    """
    Темы канала
    """
    topics: [String]
  ): UpdateChannelMutation

  """
  Загрузить видеоролик по идентификатору поста
  """
  uploadVideoByPostUid(
    """
    UID поста
    """
    postUid: UUID!

    """
    Видеоролик
    """
    video: Upload!
  ): UploadVideoMutation

  """
  Загрузить субтитры по идентификатору видео
  """
  uploadSubtitlesByVideoUid(
    """
    Язык субтитров
    """
    language: String!

    """
    Имя оригинального файла субтитров
    """
    originalName: String!

    """
    Субтитры
    """
    subtitles: Upload!

    """
    UID видео
    """
    videoUid: UUID!
  ): UploadSubtitlesMutation

  """
  Удалить субтитры по идентификатору
  """
  deleteSubtitlesById(
    """
    Индентификатор субтитров
    """
    subtitlesId: Int!
  ): DeleteSubtitlesMutation

  """
  Загрузить обложку видео по идентификатору поста
  """
  uploadCoverByPostUid(
    """
    Обложка видео
    """
    image: Upload!

    """
    UID поста
    """
    postUid: UUID!
  ): UploadVideoCoverMutation

  """
  Загрузить баннер канала
  """
  uploadBannerByChannelUid(
    """
    UID канала
    """
    channelUid: UUID!

    """
    Баннер канала
    """
    image: Upload!
  ): UploadChannelBannerMutation

  """
  Загрузить лого канала
  """
  uploadLogoByChannelUid(
    """
    UID канала
    """
    channelUid: UUID!

    """
    Лого канала
    """
    image: Upload!
  ): UploadChannelLogoMutation

  """
  Загрузить аватар пользователя
  """
  uploadAvatar(
    """
    Аватар пользователя
    """
    avatar: Upload!
  ): UploadUserAvatarMutation

  """
  Создать пост
  """
  createPost(
    """
    UID канала
    """
    channelUid: UUID!

    """
    Тип поста
    """
    postType: PostTypeEnum!
  ): CreatePost

  """
  Обновить пост
  """
  updatePost(
    """
    Тип доступа поста
    """
    access: PostAccessTypeEnum

    """
    ID ограничения по возрасту
    """
    ageRestrictionId: Int

    """
    ID категории поста
    """
    categoryId: Int

    """
    Путь до коврика поста
    """
    cover: String

    """
    Описание поста
    """
    description: String

    """
    Язык поста
    """
    language: String

    """
    Локация поста
    """
    location: String

    """
    Список UID сущностей (каналов и юзеров) упомянутых в посте
    """
    mentions: [String]

    """
    UID поста
    """
    postUid: UUID!

    """
    Дата и время отложенного поста
    """
    schedulePost: DateTime

    """
    Состояние поста
    """
    state: PostStateEnum!

    """
    Название поста
    """
    title: String
  ): UpdatePost

  """
  Добавляет/удаляет пост в избранное/из избранного
  """
  favoritePost(
    """
    UID поста
    """
    postUid: UUID!

    """
    UID канала
    """
    state: FavoritesStateEnum!
  ): FavoritePost

  """
  Удаляет все избранные посты для указанного юзера
  """
  deleteFavoritedPosts: DeleteFavoritedPosts

  """
  Удаляет все лайкнутые посты для указанного юзера
  """
  deleteLikedPosts: DeleteLikedPosts

  """
  Delete multiple posts by their respective uuids.
  """
  deletePosts(
    """
    UIDы постов
    """
    postUids: [UUID]!
  ): DeletePosts

  """
  Управление историей просмотров
  """
  logPostWatch(
    """
    Количество секунд от начала видео
    """
    lastTimestamp: Int

    """
    UID поста
    """
    postUid: UUID!
  ): LogPostWatch

  """
  Удалить всю историю просмотров пользователя или по ID
  """
  deletePostWatchHistory(
    """
    UID поста
    """
    postUid: UUID
  ): DeletePostWatchHistory

  """
  Обновить стейт субтитра
  """
  updateSubtitleState(
    """
    Состояние субтитра
    """
    state: SubtitlesStateEnum!

    """
    ID субтитра
    """
    subtitleId: Int!
  ): UpdateSubtitleState

  """
  Обновить язык субтитра
  """
  updateSubtitleLanguage(
    """
    Состояние субтитра
    """
    language: String!

    """
    ID субтитра
    """
    subtitleId: Int!
  ): UpdateSubtitleLanguage

  """
  Обновить файл субтитров по идентификатору субтитра
  """
  updateSubtitleById(
    """
    ID субтитра
    """
    subtitleId: Int!

    """
    Субтитры
    """
    subtitles: Upload!
  ): UpdateSubtitlesMutation

  """
  Создать субтитры
  """
  createSubtitle(
    """
    UID видео
    """
    videoUid: UUID!
  ): CreateSubtitleMutation

  """
  Добавить линки к социальным сетям для канала
  """
  addChannelSocialProfilesLinks(
    """
    Список линков
    """
    links: [InputSocialProfileLink]!
  ): AddChannelSocialProfilesLinks

  """
  Обновить линки к социальным сетям для канала
  """
  updateChannelSocialProfilesLinks(
    """
    Список линков
    """
    links: [InputSocialProfileLink]!
  ): UpdateChannelSocialProfilesLinks

  """
  Удалить линк к социальным сетям для канала
  """
  deleteChannelSocialProfilesLinks(
    """
    Список линков
    """
    links: [UUID]!
  ): DeleteChannelSocialProfilesLinks

  """
  Удалить баннер канала
  """
  deleteChannelBanner(
    """
    UID канала
    """
    channelUid: UUID!
  ): DeleteChannelBanner

  """
  Удалить лого канала
  """
  deleteChannelLogo(
    """
    UID канала
    """
    channelUid: UUID!
  ): DeleteChannelLogo

  """
  Засчитать просмотр
  """
  markPostAsWatched(
    """
    UID поста
    """
    postUid: UUID!
  ): MarkPostAsWatched

  """
  Обновить состояние уведомления
  """
  updateNotification(
    """
    Скрыто ли уведомление
    """
    hiddenStatus: HiddenStatus

    """
    UID уведомления
    """
    notificationUid: UUID!

    """
    Прочитано ли уведомление
    """
    readStatus: ReadStatus
  ): UpdateNotificationMutation

  """
  Обновить состояние уведомления
  """
  updateNotifications(
    """
    Скрыто ли уведомление
    """
    hiddenStatus: HiddenStatus

    """
    UIDы уведомлений
    """
    notificationsUids: [UUID]!

    """
    Прочитано ли уведомление
    """
    readStatus: ReadStatus

    """
    Просмотрены ли уведомления
    """
    watchStatus: WatchStatus
  ): UpdateNotificationsMutation

  """
  Прочитать все уведомления юзеоа
  """
  readAllNotifications: ReadAllNotificationsMutation

  """
  Создать жалобу на пользовательский контент
  """
  createComplaint(
    """
    ID категории жалобы
    """
    complaintCategoryId: Int!

    """
    Тип контенты для жалобы
    """
    contentType: ComplaintContentTypeEnum!

    """
    UUID контента
    """
    contentUid: UUID!

    """
    Признак того, что жалоба относится к описанию
    """
    isAppliesToDescription: Boolean

    """
    Текстовое описание жалобы
    """
    text: String

    """
    Тайм-код в формате HH:MM:SS
    """
    timeCode: Time

    """
    URL контента
    """
    url: String
  ): CreateComplaintMutation

  """
  Удалить поисковый запрос пользователя
  """
  deleteSearchHistoryQueryById(
    """
    ID поискового запроса
    """
    queryId: Int!
  ): DeleteSearchHistoryQueryMutation
}

"""
Зарегистрировать нового пользователя с помощью почтового ящика
"""
type RegisterEmailMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  token: String
  refreshToken: String
}

"""
Верифицировать пользователя с помощью почтового ящика
"""
type VerifyEmailMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Сбросить пароль для почтового ящика
"""
type ResetPasswordEmailMutation {
  success: Boolean
  failure: FailResponseType
  tokenExpirationDate: DateTime
}

"""
Подтвердить сброс пароля с помощью почтового ящика
"""
type VerifyResetPasswordEmailMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Зарегистрировать нового пользователя с помощью мобильного телефона
"""
type RegisterMobileMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  token: String
  refreshToken: String
}

"""
Верифицировать пользователя с помощью мобильного телефона
"""
type VerifyMobileMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Сбросить пароль для мобильного телефона
"""
type ResetPasswordMobileMutation {
  success: Boolean
  failure: FailResponseType
  tokenExpirationDate: DateTime
}

"""
Подтвердить сброс пароля с помощью мобильного телефона
"""
type VerifyResetPasswordMobileMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Аутентифицироваться в системе. Логин может быть любым (мобильный телефон/почтовый ящик)
"""
type LoginMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  token: String
  refreshToken: String
}

"""
Аутентифицироваться в системе с помощью социальной сети с помощью кода
"""
type SocialNetworkLoginMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  socialNetworkType: SocialNetworkType
  userCreated: Boolean
  socialNetworkUserId: String
  token: String
  email: String
  refreshToken: String
}

"""
Аутентифицироваться в системе с помощью социальной сети и токена доступа
"""
type SocialNetworkLoginViaAccessTokenMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  socialNetworkType: SocialNetworkType
  userCreated: Boolean
  socialNetworkUserId: String
  token: String
  email: String
  refreshToken: String
}

"""
Добавить пользователю идентификатор социальной сети
"""
type AddSocialNetworkIdToExistedUserMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  userCreated: Boolean
  token: String
  refreshToken: String
}


"""
Добавить пользователю социальную сеть
как способ авторизации
"""
type AddSocialNetworkMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить у пользователя социальную сеть
как способ авторизации
"""
type DeleteSocialNetworkMutation {
  success: Boolean
  failure: FailResponseType
}


"""
Обновить пользователя
"""
type UpdateUserMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
}

"""
Изменить почтовый ящик пользователя
"""
type EditUserEmailMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Изменить пароль для текущего пользователя
"""
type EditUserPassword {
  success: Boolean
  failure: FailResponseType
  token: String
  refreshToken: String
}

"""
Изменить имя пользователя
"""
type EditUserNameMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Изменить юзернейм пользователя
"""
type EditUserUsernameMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Изменить телефон пользователя
"""
type EditUserMobilePhoneMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Изменить дату рождения текущего пользователя
"""
type UpdateUserBirthdayMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Запустить процесс удаления пользователя
"""
type DeleteUserMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить аватар пользователя
"""
type DeleteUserAvatarMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Выйти из аккаунта
"""
type LogoutMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Выйти из всех аккаунтов
"""
type LogoutAllMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить refresh token
"""
type RefreshTokenMutation {
  success: Boolean
  failure: FailResponseType
  user: UserType
  token: String
  refreshToken: String
}

"""
Добавить ссылку на социальный профиль
"""
type AddUserSocialProfileLinkMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить ссылку на социальный профиль
"""
type DeleteUserSocialProfileLinkMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить настройки пользователя
"""
type UpdateUserSettingsMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить настройки плеера пользователя
"""
type UpdateUserPlayerSettingsMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Проверить валидность одноразового пароля
"""
type VerifyOneTimePassword {
  success: Boolean
  failure: FailResponseType

  """
  Токен доступа
  """
  token: String

  """
  Токен обновления
  """
  refreshToken: String
}

"""
An enumeration.
"""
enum OneTimePasswordOperationTypeEnum {
  RESET_PASSWORD_EMAIL
  RESET_PASSWORD_MOBILE
  REGISTER_BY_MOBILE_PHONE
  REGISTER_BY_EMAIL
  EDIT_EMAIL
  EDIT_PHONE_NUMBER
}

"""
Изменить пароль для аккаунта с почтой
"""
type ChangeEmailPassword {
  success: Boolean
  failure: FailResponseType
}

"""
Изменить пароль для аккаунта с мобильным телефоном
"""
type ChangeMobilePassword {
  success: Boolean
  failure: FailResponseType
}

"""
Аутентифицироваться от лица канала в системе
"""
type LoginChannelMutation {
  success: Boolean
  failure: FailResponseType
  token: String
}

"""
Удалить неподтвержденные юзером email и номер телефона
"""
type DeleteUnconsumedUserCredentialsMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить настройку профиля
"""
type UpdateSettingsMutation {
  success: Boolean
  failure: FailResponseType
}

"""
An enumeration.
"""
enum SettingsValueType {
  BOOL
  VOLUME
}

"""
Обновить описание роли в канале
"""
type UpdateRoleDescription {
  success: Boolean
  failure: FailResponseType
}

"""
Принять приглашение в канал другого пользователя
"""
type AcceptChannelInvitation {
  success: Boolean
  failure: FailResponseType
}

"""
Поменять пользователю роль в канале
"""
type UpdateUserRoleInChannel {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить роль пользователя в канале
"""
type DeleteUserRoleInChannel {
  success: Boolean
  failure: FailResponseType
}

"""
Отправить пользователю приглашение для работы в своем канале
"""
type InviteUserToChannel {
  success: Boolean
  failure: FailResponseType
}

"""
Добавить комментарий к посту
"""
type AddPostCommentMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID созданного комментария
  """
  commentUid: UUID
}

"""
Обновить комментарий к посту
"""
type UpdatePostCommentMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID обновленного комментария
  """
  commentUid: UUID
}

"""
Закрепить комментарий к посту
"""
type PinPostCommentMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID обновленного комментария
  """
  commentUid: UUID
}

"""
Добавить видеокомментарий к посту
"""
type AddVideoCommentMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID созданного комментария
  """
  commentUid: UUID
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

"""
Подписаться на канал
"""
type SubscribeChannelMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Отписаться от канала
"""
type UnsubscribeChannelMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Включить/отключить уведомления от подписанного канала
"""
type ToggleChannelNotifications {
  success: Boolean
  failure: FailResponseType
}

"""
Подписаться на пользователя
"""
type SubscribeUserMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Отписаться от пользователя
"""
type UnsubscribeUserMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Включить/отключить уведомелния от подписанного пользователя
"""
type ToggleUserNotifications {
  success: Boolean
  failure: FailResponseType
}

"""
Поставить лайк вместе с реакцией или обновить состояние существующего
"""
type UpdatePostLikeMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Поставить лайк на комментарий или обновить состояние существующего
"""
type UpdateCommentLikeMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Создание эмодзи
"""
type CreateEmojiMutation {
  success: Boolean
  failure: FailResponseType

  """
  ID эмодзи
  """
  emojiId: Int
}

"""
Обновление эмодзи
"""
type UpdateEmojiMutation {
  success: Boolean
  failure: FailResponseType

  """
  ID эмодзи
  """
  emojiId: Int
}

"""
Создать плейлист
"""
type CreatePlaylistMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID плейлиста
  """
  playlistUid: UUID
}

"""
Обновить плейлист
"""
type UpdatePlaylistMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID плейлиста
  """
  playlistUid: UUID
}

"""
Загрузить обложку плейлиста
"""
type UploadPlaylistCoverMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженной картинки
  """
  coverPath: String
}

"""
Удалить обложку плейлиста
"""
type DeletePlaylistCoverMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID плейлиста
  """
  playlistUid: UUID
}

"""
Удалить плейлист
"""
type DeletePlaylistMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Добавить посты в плейлист
"""
type AddPlaylistPostsMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID плейлиста
  """
  playlistUid: UUID
}

"""
Удалить посты из плейлиста
"""
type DeletePlaylistPostsMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID плейлиста
  """
  playlistUid: UUID
}

"""
Обновляет список плейлистов для указанного поста
"""
type UpdatePlaylists {
  success: Boolean
  failure: FailResponseType
}

"""
Редактирует порядковые номера постов в указанном плейлисте
"""
type ReorderPlaylistPost {
  success: Boolean
  failure: FailResponseType
}

input PostOrderType {
  """
  UID поста
  """
  postUid: UUID!

  """
  Новый порядковый номер
  """
  newOrder: Int!
}

"""
Установить кавер поста как кавер плейлиста
"""
type SetPostCoverToPlaylist {
  success: Boolean
  failure: FailResponseType
}

"""
Добавление себе чужого плейлиста
"""
type AddOtherUserPlaylist {
  success: Boolean
  failure: FailResponseType
}

"""
Удаление чужого плейлиста из списка своипх плейлистов
"""
type RemoveOtherUserPlaylist {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить тип доступа добавленного плейлиста
"""
type UpdateAddedPlaylistAccessMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Создать канал
"""
type CreateChannelMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID созданного канала
  """
  channelUid: UUID
}

"""
Обновить канал
"""
type UpdateChannelMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID созданного канала
  """
  channelUid: UUID
}

"""
Загрузить видеоролик по идентификатору поста
"""
type UploadVideoMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженного видео
  """
  videoPath: String

  """
  UID видео
  """
  videoUid: UUID

  """
  UID загруженного видео
  """
  uploadVideoUid: UUID

  """
  UID поста
  """
  postUid: UUID
}

"""
Загрузить субтитры по идентификатору видео
"""
type UploadSubtitlesMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до субтитров
  """
  subtitlesPath: String

  """
  ID субтитров
  """
  videoSubtitlesId: Int
}

"""
Удалить субтитры по идентификатору
"""
type DeleteSubtitlesMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Загрузить обложку видео по идентификатору поста
"""
type UploadVideoCoverMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженной картинки
  """
  coverPath: String
}

"""
Загрузить баннер канала
"""
type UploadChannelBannerMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженной картинки
  """
  coverPath: String
}

"""
Загрузить лого канала
"""
type UploadChannelLogoMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженной картинки
  """
  coverPath: String
}

"""
Загрузить аватар пользователя
"""
type UploadUserAvatarMutation {
  success: Boolean
  failure: FailResponseType

  """
  Путь до загруженной картинки
  """
  avatarPath: String
}

"""
Создать пост
"""
type CreatePost {
  success: Boolean
  failure: FailResponseType

  """
  UID поста-черновика
  """
  postUid: UUID

  """
  Хэш поста
  """
  urlHash: String
}

"""
Обновить пост
"""
type UpdatePost {
  success: Boolean
  failure: FailResponseType

  """
  Статус обновления поста
  """
  updated: Boolean
}

"""
Добавляет/удаляет пост в избранное/из избранного
"""
type FavoritePost {
  success: Boolean
  failure: FailResponseType
}

"""
Перечисление возможных значений "избранности" поста
"""
enum FavoritesStateEnum {
  FAVORITE
  UNFAVORITE
}

"""
Удаляет все избранные посты для указанного юзера
"""
type DeleteFavoritedPosts {
  success: Boolean
  failure: FailResponseType
}

"""
Удаляет все лайкнутые посты для указанного юзера
"""
type DeleteLikedPosts {
  success: Boolean
  failure: FailResponseType
}

"""
Delete multiple posts by their respective uuids.
"""
type DeletePosts {
  success: Boolean
  failure: FailResponseType

  """
  UIDы удаленных постов
  """
  deletedPostUids: [UUID]
}

"""
Управление историей просмотров
"""
type LogPostWatch {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить всю историю просмотров пользователя или по ID
"""
type DeletePostWatchHistory {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить стейт субтитра
"""
type UpdateSubtitleState {
  success: Boolean
  failure: FailResponseType

  """
  Статус обновления субтитра
  """
  updated: Boolean
}

"""
Обновить язык субтитра
"""
type UpdateSubtitleLanguage {
  success: Boolean
  failure: FailResponseType

  """
  Статус обновления субтитра
  """
  updated: Boolean
}

"""
Обновить файл субтитров по идентификатору субтитра
"""
type UpdateSubtitlesMutation {
  success: Boolean
  failure: FailResponseType

  """
  Статус обновления субтитра
  """
  updated: Boolean
}

"""
Создать субтитры
"""
type CreateSubtitleMutation {
  success: Boolean
  failure: FailResponseType

  """
  ID субтитра
  """
  subtitleId: Int
}

"""
Добавить линки к социальным сетям для канала
"""
type AddChannelSocialProfilesLinks {
  success: Boolean
  failure: FailResponseType
}

input InputSocialProfileLink {
  """
  UID линка, заполнять только при update
  """
  linkUid: UUID

  """
  Заголовок линка
  """
  linkName: String!

  """
  Линк
  """
  link: String!
}

"""
Обновить линки к социальным сетям для канала
"""
type UpdateChannelSocialProfilesLinks {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить линк к социальным сетям для канала
"""
type DeleteChannelSocialProfilesLinks {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить баннер канала
"""
type DeleteChannelBanner {
  success: Boolean
  failure: FailResponseType
}

"""
Удалить лого канала
"""
type DeleteChannelLogo {
  success: Boolean
  failure: FailResponseType
}

"""
Засчитать просмотр
"""
type MarkPostAsWatched {
  success: Boolean
  failure: FailResponseType
}

"""
Обновить состояние уведомления
"""
type UpdateNotificationMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID уведомления
  """
  notificationUid: UUID
}

"""
Обновить состояние уведомления
"""
type UpdateNotificationsMutation {
  success: Boolean
  failure: FailResponseType

  """
  UID уведомления
  """
  notificationsUids: [UUID]
}

"""
Прочитать все уведомления юзеоа
"""
type ReadAllNotificationsMutation {
  success: Boolean
  failure: FailResponseType
}

"""
Создать жалобу на пользовательский контент
"""
type CreateComplaintMutation {
  success: Boolean
  failure: FailResponseType

  """
  ID созданной жалобы
  """
  complaintId: Int
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

"""
Удалить поисковый запрос пользователя
"""
type DeleteSearchHistoryQueryMutation {
  success: Boolean
  failure: FailResponseType

  """
  ID поискового запроса
  """
  queryId: Int
}

interface FeatureTogglesInterfaceType {
  name: String!
}

"""
Feature toggle
"""
type BooleanFeatureTogglesType implements FeatureTogglesInterfaceType{
  name: String!
  switchOn: Boolean!
}

"""
Feature toggle
"""
type StringFeatureTogglesType implements FeatureTogglesInterfaceType{
  name: String!
  value: String!
}

"""
Get feature toggles
"""
type GetFeatureTogglesQuery {
  success: Boolean
  failure: FailResponseType
  toggles: [FeatureTogglesInterfaceType]
}